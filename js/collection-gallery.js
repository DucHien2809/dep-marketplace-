// ƒê·∫πp Collection Gallery Management
class CollectionGallery {
    constructor() {
        this.galleryItems = [];
        this.currentEditId = null;
        this.init();
    }

    async init() {
        console.log('üé® Initializing CollectionGallery...');
        this.bindEvents();
        await this.loadGalleryItems();
    }

    bindEvents() {
        console.log('üîó Binding CollectionGallery events...');
        
        // Upload image button
        document.addEventListener('click', (e) => {
            if (e.target.id === 'upload-gallery-btn' || e.target.closest('#upload-gallery-btn')) {
                e.preventDefault();
                console.log('üì∏ Upload button clicked via CollectionGallery');
                this.showUploadModal();
            }
            
            if (e.target.closest('.btn-edit-gallery')) {
                e.preventDefault();
                const itemId = e.target.closest('.gallery-item').getAttribute('data-item-id');
                this.editGalleryItem(itemId);
            }
            
            if (e.target.closest('.btn-delete-gallery')) {
                e.preventDefault();
                const itemId = e.target.closest('.gallery-item').getAttribute('data-item-id');
                this.deleteGalleryItem(itemId);
            }
            
            if (e.target.closest('.btn-view-detail')) {
                e.preventDefault();
                const itemId = e.target.closest('.gallery-item').getAttribute('data-item-id');
                this.viewGalleryDetail(itemId);
            }
            
            // Filter tags
            if (e.target.closest('.filter-tag')) {
                e.preventDefault();
                document.querySelectorAll('.filter-tag').forEach(t => t.classList.remove('active'));
                e.target.closest('.filter-tag').classList.add('active');
                const filter = e.target.closest('.filter-tag').getAttribute('data-filter');
                this.filterGalleryItems(filter);
            }
        });

        // File input change
        document.addEventListener('change', (e) => {
            if (e.target.id === 'gallery-image-input') {
                this.handleImageUpload(e.target.files);
            }
        });
    }

    filterGalleryItems(filter) {
        console.log('üîç Filtering gallery items:', filter);
        const items = document.querySelectorAll('.gallery-item');
        
        items.forEach(item => {
            if (filter === 'all') {
                item.style.display = 'block';
            } else {
                const tags = item.getAttribute('data-tags');
                if (tags && tags.includes(filter)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            }
        });
        
        if (window.Utils) {
            Utils.showToast(`L·ªçc theo: ${filter === 'all' ? 'T·∫•t c·∫£' : filter}`, 'info');
        }
    }

    createGalleryPage() {
        return `
            <div id="dep-collection-page" class="page">
                <!-- Gallery Hero -->
                <div class="gallery-hero">
                    <div class="container">
                        <div class="gallery-hero-content">
                            <h1>ƒê·∫πp Collection</h1>
                            <p class="gallery-subtitle">Tr∆∞ng b√†y nh·ªØng t√°c ph·∫©m t√°i ch·∫ø ƒë·ªôc ƒë√°o</p>
                            <p class="gallery-description">
                                Kh√°m ph√° h√†nh tr√¨nh t√°i sinh c·ªßa th·ªùi trang - t·ª´ nh·ªØng m√≥n ƒë·ªì c≈© ƒë·∫øn nh·ªØng t√°c ph·∫©m ngh·ªá thu·∫≠t m·ªõi
                            </p>
                            
                            <!-- Admin Controls -->
                            <div class="admin-controls admin-only">
                                <button class="btn btn-primary" id="upload-gallery-btn">
                                    <i class="fas fa-upload"></i>
                                    Upload ·∫£nh m·ªõi
                                </button>
                                <button class="btn btn-secondary" id="manage-gallery-btn">
                                    <i class="fas fa-cog"></i>
                                    Qu·∫£n l√Ω gallery
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Gallery Grid -->
                <div class="gallery-content">
                    <div class="container">
                        <!-- Gallery Stats (Admin only) -->
                        <div class="gallery-stats admin-only">
                            <div class="stat-card">
                                <span class="stat-number" id="total-items">12</span>
                                <span class="stat-label">T·ªïng t√°c ph·∫©m</span>
                            </div>
                            <div class="stat-card">
                                <span class="stat-number" id="featured-items">5</span>
                                <span class="stat-label">N·ªïi b·∫≠t</span>
                            </div>
                            <div class="stat-card">
                                <span class="stat-number" id="total-views">1,234</span>
                                <span class="stat-label">L∆∞·ª£t xem</span>
                            </div>
                        </div>

                        <!-- Filter Tags -->
                        <div class="gallery-filters">
                            <button class="filter-tag active" data-filter="all">T·∫•t c·∫£</button>
                            <button class="filter-tag" data-filter="vintage">Vintage</button>
                            <button class="filter-tag" data-filter="modern">Hi·ªán ƒë·∫°i</button>
                            <button class="filter-tag" data-filter="boho">Boho</button>
                            <button class="filter-tag" data-filter="minimalist">T·ªëi gi·∫£n</button>
                        </div>

                        <!-- Gallery Grid -->
                        <div class="gallery-grid" id="gallery-grid">
                            ${this.generateGalleryItems()}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    generateGalleryItems() {
        const sampleItems = [
            {
                id: 1,
                title: "√Åo ki·ªÉu Vintage Renaissance",
                image: "https://images.unsplash.com/photo-1434389677669-e08b4cac3105?w=400&h=500&fit=crop",
                story: "T√°i sinh t·ª´ √°o s∆° mi linen th·∫≠p ni√™n 80, k·∫øt h·ª£p v·ªõi ren vintage t·ª´ Ph√°p",
                tags: ["vintage", "renaissance"],
                featured: true,
                views: 245,
                created: "2024-01-15"
            },
            {
                id: 2,
                title: "V√°y T√°i Ch·∫ø Bohemian",
                image: "https://images.unsplash.com/photo-1595777457583-95e059d581b8?w=400&h=500&fit=crop",
                story: "T·ª´ nh·ªØng m·∫£nh v·∫£i cotton organic c√≤n s√≥t l·∫°i, t·∫°o n√™n t√°c ph·∫©m ngh·ªá thu·∫≠t m·ªõi",
                tags: ["boho", "organic"],
                featured: true,
                views: 189,
                created: "2024-01-14"
            },
            {
                id: 3,
                title: "T√∫i Tote Minimalist",
                image: "https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=400&h=500&fit=crop",
                story: "Canvas t√°i ch·∫ø t·ª´ bao b√¨ c≈©, thi·∫øt k·∫ø t·ªëi gi·∫£n nh∆∞ng ƒë·∫ßy tinh t·∫ø",
                tags: ["minimalist", "canvas"],
                featured: false,
                views: 156,
                created: "2024-01-12"
            },
            {
                id: 4,
                title: "√Åo Kho√°c Denim Upcycled",
                image: "https://images.unsplash.com/photo-1551107696-a4b0c5a0d9a2?w=400&h=500&fit=crop",
                story: "Bi·∫øn h√≥a t·ª´ √°o kho√°c denim c≈© th√†nh t√°c ph·∫©m streetwear hi·ªán ƒë·∫°i",
                tags: ["modern", "streetwear"],
                featured: true,
                views: 312,
                created: "2024-01-10"
            },
            {
                id: 5,
                title: "V√°y Cocktail Vintage",
                image: "https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?w=400&h=500&fit=crop",
                story: "Ph·ª•c h·ªìi t·ª´ v√°y cocktail th·∫≠p ni√™n 60, gi·ªØ nguy√™n v·∫ª ƒë·∫πp c·ªï ƒëi·ªÉn",
                tags: ["vintage", "cocktail"],
                featured: false,
                views: 203,
                created: "2024-01-08"
            },
            {
                id: 6,
                title: "√Åo Blouse Bohemian Chic",
                image: "https://images.unsplash.com/photo-1583743814966-8936f37f631b?w=400&h=500&fit=crop",
                story: "K·∫øt h·ª£p v·∫£i l·ª•a vintage v·ªõi th√™u tay truy·ªÅn th·ªëng Vi·ªát Nam",
                tags: ["boho", "silk"],
                featured: true,
                views: 278,
                created: "2024-01-05"
            }
        ];

        return sampleItems.map(item => this.renderGalleryItem(item)).join('');
    }

    generateGalleryItemsFromData() {
        if (!this.galleryItems || this.galleryItems.length === 0) {
            return '<div class="no-items">Ch∆∞a c√≥ t√°c ph·∫©m n√†o</div>';
        }
        return this.galleryItems.map(item => this.renderGalleryItem(item)).join('');
    }

    renderGalleryItem(item) {
        const tags = Array.isArray(item.tags) ? item.tags : 
                    (typeof item.tags === 'string' ? JSON.parse(item.tags || '[]') : []);
        const isDbItem = !!item.created_at;
        const viewCount = item.views || 0;
        const createDate = isDbItem ? 
            new Date(item.created_at).toLocaleDateString('vi-VN') : 
            item.created;

        return `
            <div class="gallery-item ${item.is_featured || item.featured ? 'featured' : ''}" 
                 data-item-id="${item.id}" 
                 data-tags="${tags.join(' ')}">
                <div class="gallery-item-image" style="background-image: url('${item.image_url || item.image}')">
                    ${(item.is_featured || item.featured) ? '<span class="featured-badge">N·ªïi b·∫≠t</span>' : ''}
                    
                    <!-- Admin Controls -->
                    <div class="gallery-item-controls admin-only">
                        <button class="btn-icon btn-edit-gallery" title="Ch·ªânh s·ª≠a">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn-icon btn-delete-gallery" title="X√≥a">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    
                    <!-- View Overlay -->
                    <div class="gallery-overlay">
                        <button class="btn-view-detail">
                            <i class="fas fa-eye"></i>
                            Xem chi ti·∫øt
                        </button>
                    </div>
                </div>
                
                <div class="gallery-item-info">
                    <h3 class="gallery-item-title">${item.title}</h3>
                    <p class="gallery-item-story">${item.story}</p>
                    
                    <div class="gallery-item-meta">
                        <div class="gallery-tags">
                            ${tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                        </div>
                        <div class="gallery-stats">
                            <span class="view-count">
                                <i class="fas fa-eye"></i>
                                ${viewCount}
                            </span>
                            <span class="create-date admin-only">
                                <i class="fas fa-calendar"></i>
                                ${createDate}
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    showUploadModal() {
        const modalHTML = `
            <div id="upload-gallery-modal" class="modal gallery-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Upload T√°c Ph·∫©m M·ªõi</h3>
                        <button class="close-btn" onclick="this.closest('.modal').remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div class="modal-body">
                        <form class="upload-form">
                            <!-- Image Upload Area -->
                            <div class="upload-area">
                                <div class="upload-zone" id="upload-zone">
                                    <i class="fas fa-cloud-upload-alt"></i>
                                    <h4>K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c click ƒë·ªÉ ch·ªçn</h4>
                                    <p>H·ªó tr·ª£: JPG, PNG, WEBP (t·ªëi ƒëa 5MB)</p>
                                    <input type="file" id="gallery-image-input" accept="image/*" multiple hidden>
                                </div>
                                
                                <div class="image-preview" id="image-preview"></div>
                            </div>
                            
                            <!-- Form Fields -->
                            <div class="form-row">
                                <div class="form-group">
                                    <label>Ti√™u ƒë·ªÅ t√°c ph·∫©m *</label>
                                    <input type="text" id="item-title" placeholder="VD: √Åo ki·ªÉu Vintage Renaissance" required>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label>C√¢u chuy·ªán t√°i ch·∫ø *</label>
                                <textarea id="item-story" placeholder="K·ªÉ v·ªÅ h√†nh tr√¨nh t√°i sinh c·ªßa t√°c ph·∫©m n√†y..." rows="4" required></textarea>
                            </div>
                            
                            <div class="form-row">
                                <div class="form-group">
                                    <label>Tags (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)</label>
                                    <input type="text" id="item-tags" placeholder="vintage, renaissance, linen">
                                </div>
                                
                                <div class="form-group featured-toggle-group">
                                    <label class="featured-toggle-label">ƒê·∫∑t l√†m n·ªïi b·∫≠t</label>
                                    <div class="featured-toggle-container">
                                        <input type="checkbox" id="item-featured" class="featured-toggle-input">
                                        <label for="item-featured" class="featured-toggle-switch">
                                            <span class="featured-toggle-slider"></span>
                                            <span class="featured-toggle-text">
                                                <span class="toggle-on">‚ú® N·ªïi b·∫≠t</span>
                                                <span class="toggle-off">B√¨nh th∆∞·ªùng</span>
                                            </span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" onclick="this.closest('.modal').remove()">H·ªßy</button>
                        <button type="button" class="btn btn-primary" onclick="collectionGallery.saveGalleryItem()">
                            <i class="fas fa-save"></i>
                            L∆∞u t√°c ph·∫©m
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        document.getElementById('upload-gallery-modal').classList.add('show');
        
        // Setup drag and drop
        this.setupImageUpload();
    }

    setupImageUpload() {
        const uploadZone = document.getElementById('upload-zone');
        const fileInput = document.getElementById('gallery-image-input');
        
        uploadZone.addEventListener('click', () => fileInput.click());
        
        uploadZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadZone.classList.add('dragover');
        });
        
        uploadZone.addEventListener('dragleave', () => {
            uploadZone.classList.remove('dragover');
        });
        
        uploadZone.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadZone.classList.remove('dragover');
            this.handleImageUpload(e.dataTransfer.files);
        });
    }

    handleImageUpload(files) {
        const preview = document.getElementById('image-preview');
        preview.innerHTML = '';
        
        Array.from(files).forEach((file, index) => {
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const imageContainer = document.createElement('div');
                    imageContainer.className = 'image-preview-item';
                    imageContainer.innerHTML = `
                        <img src="${e.target.result}" alt="Preview ${index + 1}">
                        <button class="remove-image" onclick="this.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    `;
                    preview.appendChild(imageContainer);
                };
                reader.readAsDataURL(file);
            }
        });
    }

    async saveGalleryItem() {
        const title = document.getElementById('item-title').value.trim();
        const story = document.getElementById('item-story').value.trim();
        const tags = document.getElementById('item-tags').value.trim();
        const featured = document.getElementById('item-featured').checked;
        
        // Validation
        if (!title || !story) {
            Utils.showToast('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin', 'error');
            return;
        }

        const fileInput = document.getElementById('gallery-image-input');
        if (!fileInput.files || fileInput.files.length === 0) {
            Utils.showToast('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ·∫£nh', 'error');
            return;
        }

        try {
            Utils.showLoading(true);
            
            // Upload main image
            const mainFile = fileInput.files[0];
            const mainImageUrl = await this.uploadImage(mainFile, 'main');
            
            // Upload additional images
            const additionalImages = [];
            for (let i = 1; i < fileInput.files.length && i < CONFIG.gallery.maxFiles; i++) {
                const imageUrl = await this.uploadImage(fileInput.files[i], `additional-${i}`);
                additionalImages.push(imageUrl);
            }

            // Parse tags
            const tagsArray = tags ? tags.split(',').map(tag => tag.trim()).filter(tag => tag) : [];

            // Save to database
            const { data, error } = await supabase
                .from(TABLES.GALLERY_ITEMS)
                .insert([{
                    title: title,
                    story: story,
                    image_url: mainImageUrl,
                    gallery: additionalImages,
                    tags: tagsArray,
                    is_featured: featured,
                    status: 'active',
                    created_by: (await supabase.auth.getUser()).data.user?.id,
                    published_at: new Date().toISOString()
                }])
                .select();

            if (error) throw error;

            Utils.showToast('ƒê√£ l∆∞u t√°c ph·∫©m th√†nh c√¥ng!', 'success');
            document.getElementById('upload-gallery-modal').remove();
            
            // Refresh gallery
            await this.loadGalleryItems();
            this.refreshGallery();

        } catch (error) {
            console.error('Error saving gallery item:', error);
            Utils.showToast('C√≥ l·ªói x·∫£y ra khi l∆∞u t√°c ph·∫©m: ' + error.message, 'error');
        } finally {
            Utils.showLoading(false);
        }
    }

    async uploadImage(file, prefix = '') {
        // Validate file
        if (!CONFIG.gallery.allowedTypes.includes(file.type)) {
            throw new Error(`ƒê·ªãnh d·∫°ng file kh√¥ng h·ªó tr·ª£: ${file.type}`);
        }
        
        if (file.size > CONFIG.gallery.maxFileSize) {
            throw new Error(`File qu√° l·ªõn. T·ªëi ƒëa ${CONFIG.gallery.maxFileSize / 1024 / 1024}MB`);
        }

        // Generate unique filename
        const timestamp = Date.now();
        const randomStr = Math.random().toString(36).substring(2, 8);
        const extension = file.name.split('.').pop();
        const fileName = `${prefix}-${timestamp}-${randomStr}.${extension}`;
        const filePath = `gallery/${fileName}`;

        // Upload to Supabase Storage
        const { data, error } = await supabase.storage
            .from(CONFIG.storage.buckets.gallery)
            .upload(filePath, file);

        if (error) {
            throw new Error(`L·ªói upload ·∫£nh: ${error.message}`);
        }

        // Get public URL
        const { data: { publicUrl } } = supabase.storage
            .from(CONFIG.storage.buckets.gallery)
            .getPublicUrl(filePath);

        return publicUrl;
    }

    editGalleryItem(itemId) {
        // TODO: Load item data and show edit modal
        Utils.showToast('Ch·ª©c nƒÉng ch·ªânh s·ª≠a ƒëang ph√°t tri·ªÉn', 'info');
    }

    deleteGalleryItem(itemId) {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√°c ph·∫©m n√†y?')) {
            // TODO: Implement actual delete
            Utils.showToast('ƒê√£ x√≥a t√°c ph·∫©m', 'success');
            this.refreshGallery();
        }
    }

    viewGalleryDetail(itemId) {
        // TODO: Show detail modal
        Utils.showToast('Xem chi ti·∫øt t√°c ph·∫©m', 'info');
    }

    refreshGallery() {
        const grid = document.getElementById('gallery-grid');
        if (grid) {
            // Use real data if available, fallback to sample data
            if (this.galleryItems && this.galleryItems.length > 0) {
                grid.innerHTML = this.generateGalleryItemsFromData();
            } else {
                grid.innerHTML = this.generateGalleryItems();
            }
        }
    }

    async loadGalleryItems() {
        try {
            const { data, error } = await supabase
                .from(TABLES.GALLERY_ITEMS)
                .select('*')
                .eq('status', 'active')
                .order('created_at', { ascending: false });

            if (error) throw error;

            this.galleryItems = data || [];
            console.log('Loaded gallery items:', this.galleryItems.length);
            
            // Update UI if gallery grid exists
            const grid = document.getElementById('gallery-grid');
            if (grid) {
                grid.innerHTML = this.generateGalleryItemsFromData();
            }
            
            return this.galleryItems;
        } catch (error) {
            console.error('Error loading gallery items:', error);
            Utils.showToast('Kh√¥ng th·ªÉ t·∫£i gallery items', 'error');
            return [];
        }
    }
}

// Initialize
window.collectionGallery = new CollectionGallery();
